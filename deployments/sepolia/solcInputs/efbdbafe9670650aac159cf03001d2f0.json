{
  "language": "Solidity",
  "sources": {
    "contracts/WalletGenerator.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.24;\r\n\r\ncontract MultiSigWallet {\r\n    mapping(address => bool) private uniqueOwners;\r\n    address[] public owners;\r\n    uint256 public signaturesRequired;\r\n\r\n    constructor(address[] memory _owners, uint256 _signaturesRequired) {\r\n        require(_owners.length > 1, \"Required atleast 2 owners\");\r\n        require(\r\n            _signaturesRequired > 0 && _signaturesRequired <= _owners.length,\r\n            \"Invalid value for argument _signaturesRequired\"\r\n        );\r\n        require(\r\n            noDuplicateOwners(_owners) == true,\r\n            \"Duplicate owners are not allowed\"\r\n        );\r\n        signaturesRequired = _signaturesRequired;\r\n        for (uint256 i = 0; i < _owners.length; ++i) {\r\n            owners.push(_owners[i]);\r\n        }\r\n    }\r\n\r\n    function noDuplicateOwners(\r\n        address[] memory _owners\r\n    ) internal view returns (bool) {\r\n        for (uint256 i = 0; i < _owners.length; ++i) {\r\n            if (uniqueOwners[_owners[i]]) return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract WalletGenerator {\r\n    event WalletCreated(\r\n        address[] owners,\r\n        uint256 signaturesRequired,\r\n        address walletAddress\r\n    );\r\n\r\n    function createNewWallet(\r\n        address[] memory owners,\r\n        uint256 signaturesRequired\r\n    ) external returns (address) {\r\n        // [\"0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc\", \"0x14dC79964da2C08b23698B3D3cc7Ca32193d9955\", \"0xa0Ee7A142d267C1f36714E4a8F75612F20a79720\"]\r\n        //  2\r\n\r\n        MultiSigWallet multiSigWallet = new MultiSigWallet(\r\n            owners,\r\n            signaturesRequired\r\n        );\r\n\r\n        emit WalletCreated(owners, signaturesRequired, address(multiSigWallet));\r\n\r\n        return address(multiSigWallet);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}